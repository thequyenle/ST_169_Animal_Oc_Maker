package com.example.st169_animal_oc_maker.ui.customize

import android.app.Activity
import android.content.Context
import android.util.Log
import android.view.View
import android.widget.FrameLayout
import android.widget.ImageView
import androidx.lifecycle.ViewModel
import com.example.st169_animal_oc_maker.R
import com.example.st169_animal_oc_maker.core.extensions.showToast
import com.example.st169_animal_oc_maker.core.helper.BitmapHelper
import com.example.st169_animal_oc_maker.core.helper.InternetHelper
import com.example.st169_animal_oc_maker.core.helper.MediaHelper
import com.example.st169_animal_oc_maker.core.utils.HandleState
import com.example.st169_animal_oc_maker.core.utils.SaveState
import com.example.st169_animal_oc_maker.core.utils.key.AssetsKey
import com.example.st169_animal_oc_maker.core.utils.key.ValueKey
import com.example.st169_animal_oc_maker.data.custom.CustomizeModel
import com.example.st169_animal_oc_maker.data.custom.ItemColorImageModel
import com.example.st169_animal_oc_maker.data.custom.ItemColorModel
import com.example.st169_animal_oc_maker.data.custom.ItemNavCustomModel
import com.example.st169_animal_oc_maker.data.custom.LayerListModel
import com.example.st169_animal_oc_maker.data.custom.NavigationModel
import com.example.st169_animal_oc_maker.data.suggestion.RandomState
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.flow
import kotlinx.coroutines.flow.flowOn
import kotlin.apply
import kotlin.collections.eachCount
import kotlin.collections.filter
import kotlin.collections.forEach
import kotlin.collections.forEachIndexed
import kotlin.collections.groupingBy
import kotlin.collections.indexOfFirst
import kotlin.collections.isNotEmpty
import kotlin.collections.mapIndexed
import kotlin.collections.toCollection
import kotlin.ranges.random
import kotlin.ranges.until
import kotlin.to

class CustomizeViewModel : ViewModel() {
    // ƒê·∫øm s·ªë l·∫ßn random, ch·ªâ s·ªë ƒë∆∞·ª£c ch·ªçn
    var countRandom = 0
    var positionSelected = 0

    // Data t·ª´ API hay kh√¥ng
    private val _isDataAPI = MutableStateFlow(false)

    // Tr·∫°ng th√°i flip
    private val _isFlip = MutableStateFlow(false)
    val isFlip = _isFlip.asStateFlow()

    // Bi·∫øn l∆∞u suggestion preset
    private val _suggestionState = MutableStateFlow<RandomState?>(null)
    private val _suggestionBackground = MutableStateFlow<String?>(null)

    //----------------------------------------------------------------------------------------------------------------------
    private val _positionNavSelected = MutableStateFlow(-1)
    val positionNavSelected = _positionNavSelected.asStateFlow()

    private val _positionCustom = MutableStateFlow(-1)
    val positionCustom = _positionCustom.asStateFlow()

    // Data g·ªëc
    private val _dataCustomize = MutableStateFlow<CustomizeModel?>(null)
    val dataCustomize = _dataCustomize.asStateFlow()

    // Danh s√°ch Navigation bottom
    private val _bottomNavigationList = MutableStateFlow(arrayListOf<NavigationModel>())
    val bottomNavigationList = _bottomNavigationList.asStateFlow()

    // Danh s√°ch layer & item
//    private val _categoryList = MutableStateFlow(arrayListOf<ArrayList<LayerModel>>())
//    val categoryList = _categoryList.asStateFlow()

    private val _itemNavList = MutableStateFlow(arrayListOf<ArrayList<ItemNavCustomModel>>())
    val itemNavList = _itemNavList.asStateFlow()

    // Danh s√°ch m√†u
    private val _colorItemNavList = MutableStateFlow(arrayListOf<ArrayList<ItemColorModel>>())
    val colorItemNavList = _colorItemNavList.asStateFlow()

    // Tr·∫°ng th√°i ch·ªçn item/m√†u
    private val _positionColorItemList = MutableStateFlow(arrayListOf<Int>())
    val positionColorItemList = _positionColorItemList.asStateFlow()

    private val _isSelectedItemList = MutableStateFlow(arrayListOf<Boolean>())
    val isSelectedItemList = _isSelectedItemList.asStateFlow()

    private val _isShowColorList = MutableStateFlow(arrayListOf<Boolean>())
    val isShowColorList = _isShowColorList.asStateFlow()

    // Key + Path ƒë√£ ch·ªçn
    private val _keySelectedItemList = MutableStateFlow(arrayListOf<String>())
    val keySelectedItemList = _keySelectedItemList.asStateFlow()

    private val _pathSelectedList = MutableStateFlow(arrayListOf<String>())
    val pathSelectedList = _pathSelectedList.asStateFlow()

    // Danh s√°ch ImageView tr√™n layout
    private val _imageViewList = MutableStateFlow(arrayListOf<ImageView>())
    val imageViewList = _imageViewList.asStateFlow()

    // ‚úÖ FIX: ImageView ri√™ng cho Body layer (ƒë·ªÉ tr√°nh conflict v·ªõi Ears)
    private val _bodyImageView = MutableStateFlow<ImageView?>(null)
    val bodyImageView = _bodyImageView.asStateFlow()

    private val _colorListMost = MutableStateFlow(arrayListOf<String>())
    val colorListMost = _colorListMost.asStateFlow()

    // ‚úÖ PERFORMANCE: Cache for layer index mapping (positionNavigation -> layerIndex)
    private val _layerIndexCache = MutableStateFlow<Map<Int, Int>>(emptyMap())

    //----------------------------------------------------------------------------------------------------------------------
    // Base setter
    suspend fun setPositionNavSelected(position: Int) {
        _positionNavSelected.value = position
    }

    suspend fun setPositionCustom(position: Int) {
        _positionCustom.value = position
    }

    fun setDataCustomize(data: CustomizeModel) {
        _dataCustomize.value = data
        // ‚úÖ Build cache when data is set
        buildLayerIndexCache()
    }

    private fun buildLayerIndexCache() {
        val layerList = _dataCustomize.value?.layerList ?: return
        val cache = mutableMapOf<Int, Int>()

        layerList.forEachIndexed { index, layer ->
            // üîß HARDFIX: Character 1 & 2, Layer[21] c√≥ posNav=20 trong data
            // ‚Üí B·ªè qua duplicate warning v√† th√™m v√†o cache v·ªõi posNav=21
            if ((positionSelected == 1 || positionSelected == 2) && index == 21 && layer.positionNavigation == 20) {
                cache[21] = index  // Th√™m v√†o cache v·ªõi key=21
                Log.d("CustomizeViewModel", "üîß HARDFIX Character $positionSelected: Layer[21] mapped to posNav=21 (actual posNav=20, posCus=${layer.positionCustom})")
                return@forEachIndexed
            }

            // ‚ö†Ô∏è Detect duplicate positionNavigation
            if (cache.containsKey(layer.positionNavigation)) {
                Log.e("CustomizeViewModel", "‚ö†Ô∏è DUPLICATE positionNavigation=${layer.positionNavigation}!")
                Log.e("CustomizeViewModel", "   Layer[${cache[layer.positionNavigation]}]: posNav=${layer.positionNavigation}")
                Log.e("CustomizeViewModel", "   Layer[$index]: posNav=${layer.positionNavigation}, posCus=${layer.positionCustom}")
                Log.e("CustomizeViewModel", "   ‚Üí Using FIRST occurrence (Layer[${cache[layer.positionNavigation]}])")
                // ‚úÖ KH√îNG ghi ƒë√® - gi·ªØ layer ƒë·∫ßu ti√™n
            } else {
                cache[layer.positionNavigation] = index
            }
        }

        _layerIndexCache.value = cache

        // üîç LOG: Full cache for debugging
        Log.d("CustomizeViewModel", "üìã Layer Index Cache built: ${cache.size} entries (Character $positionSelected)")
        cache.entries.sortedBy { it.key }.forEach { (posNav, layerIndex) ->
            val layer = layerList[layerIndex]
            Log.d("CustomizeViewModel", "   posNav=$posNav ‚Üí Layer[$layerIndex] (posCus=${layer.positionCustom})")
        }
    }

    fun setIsDataAPI(isAPI: Boolean) {
        _isDataAPI.value = isAPI
    }

    fun isDataAPI(): Boolean {
        return _isDataAPI.value
    }

    fun setIsFlip() {
        _isFlip.value = !_isFlip.value
    }

    fun setPositionColorItemList(positionList: ArrayList<Int>) {
        _positionColorItemList.value = positionList
    }

    fun setIsSelectedItemList(selectedList: ArrayList<Boolean>) {
        _isSelectedItemList.value = selectedList
    }

    fun setIsShowColorList(showList: ArrayList<Boolean>) {
        _isShowColorList.value = showList
    }

//    suspend fun setCategoryList(categoryList: ArrayList<ArrayList<LayerModel>>) {
//        _categoryList.value = categoryList
//    }

    fun setKeySelectedItemList(keyList: ArrayList<String>) {
        _keySelectedItemList.value = keyList
    }

    fun setPathSelectedList(pathList: ArrayList<String>) {
        _pathSelectedList.value = pathList
    }

    fun setColorListMost(colorList: ArrayList<String>) {
        _colorListMost.value = colorList
    }

    fun setSuggestionPreset(stateJson: String?, background: String?) {
        stateJson?.let {
            _suggestionState.value = RandomState.fromJson(it)
        }
        _suggestionBackground.value = background
    }

    /**
     * Apply suggestion preset after character loaded
     * Call this after setDataCustomize() and before setFocusItemNavDefault()
     */
    suspend fun applySuggestionPreset() {
        val preset = _suggestionState.value ?: return

        Log.d("CustomizeViewModel", "üìä APPLYING SUGGESTION PRESET (${preset.layerSelections.size} layers)")

        // üéØ LOG: Ch·ªâ log Miley keys
        preset.layerSelections.forEach { (key, sel) ->
            if (key == 20 || key == 17 || key == 22 || sel.path.contains("18-21") || sel.path.contains("23-21") || sel.path.contains("21-18")) {
                Log.d("CustomizeViewModel", "üéØ MILEY: key=$key, itemIndex=${sel.itemIndex}, path=${sel.path.substringAfterLast("/")}")
            }
        }

        // üéØ LOG: Ch·ªâ log Miley layers v√† duplicates
        _dataCustomize.value?.layerList?.forEachIndexed { index, layer ->
            if (layer.positionNavigation == 20) {
                Log.d("CustomizeViewModel", "üéØ MILEY LAYER: index=$index, positionCustom=${layer.positionCustom}, items=${layer.layer.size}")
            }
        }

        // üéØ Check duplicates v√† missing
        val layers = _dataCustomize.value?.layerList ?: return
        val posNavs = layers.map { it.positionNavigation }.sorted()
        val duplicates = layers.groupingBy { it.positionNavigation }.eachCount().filter { it.value > 1 }

        duplicates.forEach { (posNav, count) ->
            Log.e("CustomizeViewModel", "‚ùå DUPLICATE positionNav=$posNav ($count times)")
        }

        // Check missing positionNav
        val expected = (0 until layers.size).toList()
        val missing = expected - posNavs.toSet()
        if (missing.isNotEmpty()) {
            Log.e("CustomizeViewModel", "‚ùå MISSING positionNav: $missing")
        }

        // Apply each layer selection
        preset.layerSelections.forEach { (storageKey, selection) ->
            // üéØ LOG: Ch·ªâ log Miley processing
            if (storageKey == 20 || storageKey == 17 || storageKey == 22) {
                Log.d("CustomizeViewModel", "üéØ PROCESSING MILEY: key=$storageKey, itemIndex=${selection.itemIndex}")
            }

            // ‚úÖ ULTIMATE FIX: T√¨m layer theo positionNavigation thay v√¨ positionCustom
            // V√¨ c√≥ th·ªÉ c√≥ nhi·ªÅu layers c√πng positionCustom (Body v√† Ears ƒë·ªÅu c√≥ positionCustom=1)
            val layer = if (storageKey == -1) {
                // Key=-1 l√† body layer (positionNavigation=0)
                val bodyLayer = _dataCustomize.value?.layerList?.find { it.positionNavigation == 0 }
                if (bodyLayer == null) {
                    Log.e("CustomizeViewModel", "‚ùå Body layer (positionNavigation=0) not found for key=-1")
                    return@forEach
                }
                Log.d("CustomizeViewModel", "‚úÖ Found body layer: positionNav=0, positionCustom=${bodyLayer.positionCustom}")
                bodyLayer
            } else {
                // T√¨m layer c√≥ positionCustom = storageKey
                // ‚ö†Ô∏è NH∆ØNG n·∫øu c√≥ nhi·ªÅu layers c√πng positionCustom, c·∫ßn t√¨m layer KH√îNG ph·∫£i body
                val candidateLayers = _dataCustomize.value?.layerList?.filter { it.positionCustom == storageKey }

                if (candidateLayers.isNullOrEmpty()) {
                    Log.e("CustomizeViewModel", "‚ùå No layer found with positionCustom=$storageKey")
                    Log.e("CustomizeViewModel", "   Suggestion path: ${selection.path}")
                    Log.e("CustomizeViewModel", "   Available positionCustom values: ${_dataCustomize.value?.layerList?.map { it.positionCustom }}")

                    // üéØ Special case for Miley
                    if (storageKey == 20 || selection.path.contains("21-18")) {
                        Log.e("CustomizeViewModel", "üéØüéØüéØ MILEY KEY=20 NOT FOUND! üéØüéØüéØ")
                        Log.e("CustomizeViewModel", "   Suggestion wants positionCustom=20")
                        Log.e("CustomizeViewModel", "   But customize doesn't have layer with positionCustom=20")
                        Log.e("CustomizeViewModel", "   This is why Miley item doesn't show in customize!")
                    }
                    return@forEach
                }

                // N·∫øu c√≥ nhi·ªÅu layers c√πng positionCustom, ch·ªçn layer KH√îNG ph·∫£i body (positionNav != 0)
                val targetLayer = if (candidateLayers.size > 1) {
                    val nonBodyLayer = candidateLayers.find { it.positionNavigation != 0 }
                    if (nonBodyLayer != null) {
                        Log.d("CustomizeViewModel", "‚ö†Ô∏è Multiple layers with positionCustom=$storageKey, choosing non-body layer: positionNav=${nonBodyLayer.positionNavigation}")
                        nonBodyLayer
                    } else {
                        Log.d("CustomizeViewModel", "Using first layer with positionCustom=$storageKey")
                        candidateLayers.first()
                    }
                } else {
                    Log.d("CustomizeViewModel", "Found layer with positionCustom=$storageKey")
                    candidateLayers.first()
                }

                targetLayer
            }

            val layerIndex = _dataCustomize.value?.layerList?.indexOf(layer) ?: -1
            if (layerIndex < 0) {
                Log.e("CustomizeViewModel", "‚ùå Layer index not found")
                return@forEach
            }

            // üéØ LOG: Ch·ªâ log Miley matches
            if (layer.positionNavigation == 20) {
                Log.d("CustomizeViewModel", "üéØ MILEY MATCHED: positionCustom=${layer.positionCustom}, wants itemIndex=${selection.itemIndex}")
            }

            // Validate item index
            if (selection.itemIndex >= layer.layer.size) {
                Log.e("CustomizeViewModel", "‚ùå SUGGESTION-CUSTOMIZE MISMATCH!")
                Log.e("CustomizeViewModel", "   Suggestion itemIndex: ${selection.itemIndex}")
                Log.e("CustomizeViewModel", "   Customize layer.size: ${layer.layer.size}")
                Log.e("CustomizeViewModel", "   Layer positionNav: ${layer.positionNavigation}")
                Log.e("CustomizeViewModel", "   Suggestion path: ${selection.path}")

                // üéØ LOG: Miley mismatch
                if (layer.positionNavigation == 20) {
                    Log.e("CustomizeViewModel", "üéØ MILEY MISMATCH: wants index ${selection.itemIndex}, has ${layer.layer.size} items")
                }
                Log.e("CustomizeViewModel", "   ‚Üí Item kh√¥ng t·ªìn t·∫°i trong Customize, fallback to item 0")

                // üìä Generate detailed report
                val report = generateApiMismatchReport()
                Log.e("CustomizeViewModel", "üìä FULL REPORT:")
                report.lines().forEach { line ->
                    Log.e("CustomizeViewModel", line)
                }

                // Fallback to first item (index 0) instead of crashing
                val fallbackItem = layer.layer.firstOrNull()
                if (fallbackItem == null) {
                    Log.e("CustomizeViewModel", "‚ùå Layer has no items at all!")
                    return@forEach
                }

                val item = fallbackItem
                Log.d("CustomizeViewModel", "üîÑ Using fallback item: index=0, path=${item.image}")

                // Set UI focus to fallback item (index 0 + offset)
                val rcvIndex = if (layerIndex == 0) 1 else 2  // 0 + offset for buttons
                setItemNavList(layer.positionNavigation, rcvIndex)

                // Use suggestion path (from thumbnail) instead of fallback item path
                val pathIndex = getPathIndexForLayer(layer.positionNavigation)
                _pathSelectedList.value[pathIndex] = selection.path
                _keySelectedItemList.value[layer.positionNavigation] = selection.path
                _isSelectedItemList.value[layer.positionNavigation] = true

                Log.d("CustomizeViewModel", "‚úÖ Applied fallback with suggestion path: ${selection.path}")
                return@forEach
            }

            val item = layer.layer[selection.itemIndex]

            // üéØ LOG: Miley success
            if (layer.positionNavigation == 20) {
                Log.d("CustomizeViewModel", "üéØ MILEY SUCCESS: index=${selection.itemIndex}, pathMatch=${item.image == selection.path}")
            }

            // üéØ FIX: Tr√°nh conflict cho positionNav=20 (ch·ªâ khi backend ch∆∞a fix)
            // Ki·ªÉm tra xem c√≥ duplicate positionNav=20 kh√¥ng
            val duplicateCount = _dataCustomize.value?.layerList?.count { it.positionNavigation == 20 } ?: 0
            if (duplicateCount > 1 && layer.positionNavigation == 20 && _keySelectedItemList.value[20].isNotEmpty()) {
                Log.w("CustomizeViewModel", "‚ö†Ô∏è MILEY CONFLICT SKIP: key=$storageKey skipped (backend not fixed)")
                return@forEach
            }

            // ‚úÖ Set keySelectedItemList (for tracking)
            _keySelectedItemList.value[layer.positionNavigation] = selection.path

            // üéØ LOG: Miley conflict
            if (layer.positionNavigation == 20) {
                Log.d("CustomizeViewModel", "üéØ MILEY SET: key=$storageKey sets positionNav=20")
            }

            // Set selected state
            _isSelectedItemList.value[layer.positionNavigation] = true

            // Set color if applicable
            if (item.isMoreColors && item.listColor.isNotEmpty()) {
                val validColorIndex = selection.colorIndex.coerceIn(0, item.listColor.size - 1)
                _positionColorItemList.value[layer.positionNavigation] = validColorIndex
                _isShowColorList.value[layer.positionNavigation] = true
                Log.d("CustomizeViewModel", "Set color: positionNav=${layer.positionNavigation}, colorIndex=$validColorIndex")

                // ‚úÖ CRITICAL FIX: Update color list to match selected item's colors
                // Rebuild color list from the selected item (not from layer.first())
                val colorList = ArrayList<ItemColorModel>()
                item.listColor.forEachIndexed { colorIndex, colorItem ->
                    colorList.add(ItemColorModel(
                        color = colorItem.color,
                        isSelected = (colorIndex == validColorIndex) // Set focus on preset color
                    ))
                }

                // Create new ArrayList to trigger StateFlow update
                val updatedColorItemNavList = ArrayList(_colorItemNavList.value)
                updatedColorItemNavList[layer.positionNavigation] = colorList
                _colorItemNavList.value = updatedColorItemNavList

                Log.d("CustomizeViewModel", "‚úÖ Updated color list for positionNav=${layer.positionNavigation}, focused color=$validColorIndex, total colors=${colorList.size}")
            }

            //  CRITICAL FIX: Convert data model index ‚Üí RecyclerView index
            // RecyclerView c√≥ None/Random buttons ·ªü ƒë·∫ßu, c·∫ßn c·ªông offset:
            // - Layer ƒë·∫ßu (Body): ch·ªâ c√≥ Random button ‚Üí offset +1
            // - C√°c layer kh√°c: c√≥ None + Random buttons ‚Üí offset +2
            val rcvIndex = if (layerIndex == 0) {
                selection.itemIndex + 1  // Body layer: Random button at index 0
            } else {
                selection.itemIndex + 2  // Other layers: None(0) + Random(1)
            }

            setItemNavList(layer.positionNavigation, rcvIndex)

            //  FIX: Trigger load ·∫£nh cho item ƒë∆∞·ª£c focus t·ª´ suggestion
            // N·∫øu kh√¥ng c√≥ m√†u ho·∫∑c d√πng m√†u ƒë·∫ßu ti√™n, load ·∫£nh base
            val finalPath = if (item.isMoreColors && item.listColor.isNotEmpty()) {
                val validColorIndex = selection.colorIndex.coerceIn(0, item.listColor.size - 1)
                item.listColor[validColorIndex].path
            } else {
                item.image
            }

            // Update pathSelectedList v·ªõi ·∫£nh ƒë√∫ng c·ªßa item ƒë∆∞·ª£c focus
            val pathIndex = getPathIndexForLayer(layer.positionNavigation)

            // üéØ LOG: Path conflict
            if (layer.positionNavigation == 20) {
                Log.w("CustomizeViewModel", "‚ö†Ô∏è MILEY PATH OVERWRITE: ${_pathSelectedList.value[pathIndex]} ‚Üí $finalPath")
            }

            //  FIX DUPLICATE POSITION CUSTOM: X√≥a c√°c layers c√≥ c√πng positionCustom
            // T√¨m t·∫•t c·∫£ layers c√≥ c√πng positionCustom v·ªõi layer hi·ªán t·∫°i
            val currentPositionCustom = layer.positionCustom
            val allLayers = _dataCustomize.value?.layerList ?: emptyList()
            allLayers.forEachIndexed { idx, otherLayer ->
                if (otherLayer.positionCustom == currentPositionCustom &&
                    otherLayer.positionNavigation != layer.positionNavigation) {
                    // X√≥a path c·ªßa layer duplicate
                    _pathSelectedList.value[idx] = ""
                    _keySelectedItemList.value[otherLayer.positionNavigation] = ""
                    _isSelectedItemList.value[otherLayer.positionNavigation] = false
                    Log.d("CustomizeViewModel", "üßπ PRESET CLEAR DUPLICATE: Cleared positionNav=${otherLayer.positionNavigation} (same positionCustom=$currentPositionCustom)")
                }
            }

            _pathSelectedList.value[pathIndex] = finalPath
        }

        //  Set initial navigation to body layer (first layer)
        val firstLayer = _dataCustomize.value?.layerList?.firstOrNull()
        if (firstLayer != null) {
            setPositionCustom(firstLayer.positionCustom)
            setPositionNavSelected(firstLayer.positionNavigation)
            Log.d("CustomizeViewModel", "Set initial position to body layer: positionCustom=${firstLayer.positionCustom}, positionNav=${firstLayer.positionNavigation}")
        }

        Log.d("CustomizeViewModel", "‚úÖ Suggestion preset applied")
    }
    /**
     * Get suggestion background
     */
    fun getSuggestionBackground(): String? {
        return _suggestionBackground.value
    }

    /**
     * Check if has suggestion preset
     */
    fun hasSuggestionPreset(): Boolean {
        return _suggestionState.value != null
    }




    //----------------------------------------------------------------------------------------------------------------------
    // Setter suspend
    suspend fun setPositionColorItem(position: Int, newPosition: Int) {
        _positionColorItemList.value =
            _positionColorItemList.value.mapIndexed { index, oldPosition -> if (index == position) newPosition else oldPosition }
                .toCollection(ArrayList())
    }

    suspend fun setIsSelectedItem(position: Int) {
        _isSelectedItemList.value[position] = true
    }

    suspend fun setKeySelected(position: Int, newKey: String) {
        _keySelectedItemList.value = _keySelectedItemList.value
            .mapIndexed { index, oldKey -> if (index == position) newKey else oldKey }
            .toCollection(ArrayList())
    }

    suspend fun setPathSelected(position: Int, newPath: String) {
        _pathSelectedList.value =
            _pathSelectedList.value.mapIndexed { index, oldPath -> if (index == position) newPath else oldPath }
                .toCollection(ArrayList())
    }

    /**
     * ‚úÖ FIX DUPLICATE POSITION CUSTOM:
     * X√≥a t·∫•t c·∫£ paths c·ªßa c√°c layers c√≥ c√πng positionCustom v·ªõi layer hi·ªán t·∫°i
     * V√≠ d·ª•: ƒêu√¥i A v√† ƒêu√¥i B c√πng positionCustom=21 ‚Üí Khi ch·ªçn ƒêu√¥i B, x√≥a path c·ªßa ƒêu√¥i A
     */
    private suspend fun clearLayersWithSamePositionCustom(positionNavigation: Int) {
        val layerList = _dataCustomize.value?.layerList ?: return
        val currentLayer = layerList.find { it.positionNavigation == positionNavigation } ?: return
        val currentPositionCustom = currentLayer.positionCustom

        // T√¨m t·∫•t c·∫£ layers c√≥ c√πng positionCustom (tr·ª´ layer hi·ªán t·∫°i)
        layerList.forEachIndexed { index, layer ->
            if (layer.positionCustom == currentPositionCustom && layer.positionNavigation != positionNavigation) {
                // X√≥a path v√† reset state c·ªßa layer n√†y
                _pathSelectedList.value[index] = ""
                _keySelectedItemList.value[layer.positionNavigation] = ""
                _isSelectedItemList.value[layer.positionNavigation] = false

                Log.d("CustomizeViewModel", "üßπ CLEAR DUPLICATE: Cleared layer positionNav=${layer.positionNavigation} (same positionCustom=$currentPositionCustom)")
            }
        }
    }

    //----------------------------------------------------------------------------------------------------------------------
    // Bottom Navigation
    suspend fun setBottomNavigationList(bottomNavList: ArrayList<NavigationModel>) {
        _bottomNavigationList.value = bottomNavList
    }

    suspend fun setBottomNavigationListDefault() {
        val outputBottomNavigationList = arrayListOf<NavigationModel>()
        _dataCustomize.value!!.layerList.forEach { layerList ->
            outputBottomNavigationList.add(NavigationModel(imageNavigation = layerList.imageNavigation))
        }
        outputBottomNavigationList.first().isSelected = true
        _bottomNavigationList.value = outputBottomNavigationList
    }


    suspend fun setClickBottomNavigation(position: Int) {
        _bottomNavigationList.value = _bottomNavigationList.value
            .mapIndexed { index, model -> model.copy(isSelected = index == position) }
            .toCollection(ArrayList())
    }

    //----------------------------------------------------------------------------------------------------------------------
    //  Item Nav / Layer
    suspend fun addValueToItemNavList() {
        _dataCustomize.value!!.layerList.forEachIndexed { index, layer ->
            if (index == 0) {
                _itemNavList.value.add(createListItem(layer, true))
            } else {
                _itemNavList.value.add(createListItem(layer))
            }
        }

    }

    suspend fun setFocusItemNavDefault() {
        //  FIX: Ch·ªâ set selected cho tab ƒë·∫ßu ti√™n (body tab - positionNavigation = 0)
        // C√°c tab kh√°c gi·ªØ nguy√™n tr·∫°ng th√°i m·∫∑c ƒë·ªãnh (NONE ƒë∆∞·ª£c ch·ªçn t·ª´ createListItem)

        // Tab 0 (body): ch·ªçn item th·ª© 2 (index 1) v√¨ item 0 l√† RANDOM button
        if (_itemNavList.value.isNotEmpty() && _itemNavList.value[0].size > 1) {
            _itemNavList.value[0].forEachIndexed { index, item ->
                item.isSelected = (index == 1) // Ch·ªçn item ƒë·∫ßu ti√™n th·∫≠t s·ª±, b·ªè qua RANDOM button
            }
        }

        // C√°c tab kh√°c (1, 2, 3...): gi·ªØ nguy√™n NONE ƒë∆∞·ª£c ch·ªçn (ƒë√£ set trong createListItem)
        // Kh√¥ng c·∫ßn thay ƒë·ªïi g√¨ v√¨ createListItem ƒë√£ ƒë·∫∑t NONE (index 0) l√† selected = true
    }

    suspend fun setItemNavList(positionNavigation: Int, position: Int) {
        _itemNavList.value[positionNavigation] = _itemNavList.value[positionNavigation]
                .mapIndexed { index, models -> models.copy(isSelected = index == position) }
                .toCollection(ArrayList())
    }

    suspend fun setClickFillLayer(item: ItemNavCustomModel, position: Int): String {
        val path = item.path
        setKeySelected(positionNavSelected.value, path)

        // üéØ LOG: Click item cho Dammy
        if (positionSelected == 1) {
            Log.d("CustomizeViewModel", "üñ±Ô∏è DAMMY CLICK: pos=$position, colors=${item.listImageColor.size}, nav=${positionNavSelected.value}")
        }

        val pathSelected = if (item.listImageColor.isEmpty()) {
            _positionColorItemList.value[positionNavSelected.value] = 0
            if (positionSelected == 1) Log.d("CustomizeViewModel", "üéØ DAMMY: No colors")
            path
        } else {
            val currentColorIndex = positionColorItemList.value[positionNavSelected.value]
            val safeColorIndex = currentColorIndex.coerceIn(0, item.listImageColor.size - 1)

            if (currentColorIndex != safeColorIndex) {
                Log.w("CustomizeViewModel", "‚ö†Ô∏è DAMMY: Color index reset $currentColorIndex‚Üí$safeColorIndex")
                _positionColorItemList.value[positionNavSelected.value] = safeColorIndex
            }

            val colorPath = item.listImageColor[safeColorIndex].path
            if (positionSelected == 1) Log.d("CustomizeViewModel", "üéØ DAMMY: Color[$safeColorIndex]")
            colorPath
        }

        val pathIndex = getPathIndexForLayer(positionNavSelected.value)

        // üîç LOG CHI TI·∫æT: Debug pathIndex calculation
        Log.d("CustomizeViewModel", "üìç setClickFillLayer:")
        Log.d("CustomizeViewModel", "   positionSelected: $positionSelected")
        Log.d("CustomizeViewModel", "   positionNavSelected: ${positionNavSelected.value}")
        Log.d("CustomizeViewModel", "   pathIndex returned: $pathIndex")
        Log.d("CustomizeViewModel", "   pathSelected: ${pathSelected.substringAfterLast("/")}")

        if (positionSelected == 1) {
            Log.d("CustomizeViewModel", "üíæ DAMMY SAVE: nav=${positionNavSelected.value}‚ÜípathIndex=$pathIndex")
        }

        // ‚úÖ FIX: X√≥a c√°c layers c√≥ c√πng positionCustom tr∆∞·ªõc khi set layer m·ªõi
        clearLayersWithSamePositionCustom(positionNavSelected.value)

        // üéØ FIX: Save v·ªõi pathIndex ƒë√£ ƒë∆∞·ª£c fix
        if (pathIndex != -1) {
            setPathSelected(pathIndex, pathSelected)
            Log.d("CustomizeViewModel", "‚úÖ SAVED: pathSelectedList[$pathIndex] = ${pathSelected.substringAfterLast("/")}")
            if (positionSelected == 1) {
                Log.d("CustomizeViewModel", "‚úÖ DAMMY SAVED: pathIndex=$pathIndex")
            }
        } else {
            Log.e("CustomizeViewModel", "‚ùå Cannot save - positionNav=${positionNavSelected.value} not found")
        }

        setIsSelectedItem(positionNavSelected.value)
        setItemNavList(_positionNavSelected.value, position)
        return pathSelected
    }

    suspend fun setClickRandomLayer(): Pair<String, Boolean> {
        val positionStartLayer = if (positionNavSelected.value == 0) 1 else 2
        val randomLayer = if (positionNavSelected.value == 0) {
            if (itemNavList.value[positionNavSelected.value].size == 1) {
                1
            } else {
                (positionStartLayer..<itemNavList.value[positionNavSelected.value].size).random()
            }
        } else {
            (positionStartLayer..<itemNavList.value[positionNavSelected.value].size).random()
        }

        var randomColor: Int? = null
        var isMoreColors = false

        if (itemNavList.value[positionNavSelected.value][positionStartLayer].listImageColor.isNotEmpty()) {
            isMoreColors = true
            randomColor = (0..<(itemNavList.value[positionNavSelected.value][positionStartLayer].listImageColor.size)).random()
        }

        var pathRandom = itemNavList.value[positionNavSelected.value][randomLayer].path
        setKeySelected(positionNavSelected.value, pathRandom)

        if (!isMoreColors) {
            setPositionColorItem(positionNavSelected.value, 0)  // ‚úÖ S·ª¨A: positionNavSelected thay v√¨ positionCustom
        } else {
            pathRandom = itemNavList.value[positionNavSelected.value][randomLayer].listImageColor[randomColor!!].path
            setPositionColorItem(positionNavSelected.value, randomColor)  // ‚úÖ S·ª¨A: positionNavSelected thay v√¨ positionCustom
        }

        // ‚úÖ AUTO-DETECT: T·ª± ƒë·ªông ch·ªçn pathIndex ph√π h·ª£p v·ªõi data structure
        val pathIndex = getPathIndexForLayer(positionNavSelected.value)

        // ‚úÖ FIX: X√≥a c√°c layers c√≥ c√πng positionCustom tr∆∞·ªõc khi set layer m·ªõi
        clearLayersWithSamePositionCustom(positionNavSelected.value)

        // üéØ FIX: Ch·ªâ save khi pathIndex h·ª£p l·ªá
        if (pathIndex != -1) {
            setPathSelected(pathIndex, pathRandom)
        } else {
            Log.e("CustomizeViewModel", "‚ùå RANDOM: Cannot save - positionNav=${positionNavSelected.value} not found")
        }

        setItemNavList(_positionNavSelected.value, randomLayer)
        if (isMoreColors) {
            setColorItemNav(positionNavSelected.value, randomColor!!)
        }
        return pathRandom to isMoreColors
    }
    suspend fun setClickRandomFullLayer(): Boolean {
//        countRandom++
//        val isOutTurn = if (countRandom == 5) true else false

        // ‚úÖ FIX DUPLICATE POSITION CUSTOM:
        // Step 1: T·∫°o map ƒë·ªÉ track positionCustom ƒë√£ ƒë∆∞·ª£c random
        val layerList = _dataCustomize.value?.layerList ?: return false
        val positionCustomMap = mutableMapOf<Int, Int>() // positionCustom -> positionNavigation ƒë√£ ch·ªçn

        val colorCode =
            if (colorListMost.value.isNotEmpty()) _colorListMost.value[(0..<colorListMost.value.size).random()] else "#123456"

        for (i in 0 until _bottomNavigationList.value.size) {
            val minSize = if (i == 0) 1 else 2
            if (_itemNavList.value[i].size <= minSize) {
                continue
            }

            val currentLayer = layerList[i]
            val currentPositionCustom = currentLayer.positionCustom

            // ‚úÖ Ki·ªÉm tra xem positionCustom n√†y ƒë√£ ƒë∆∞·ª£c random ch∆∞a
            if (positionCustomMap.containsKey(currentPositionCustom)) {
                // ƒê√£ c√≥ layer kh√°c c√πng positionCustom ƒë∆∞·ª£c random ‚Üí Skip layer n√†y
                Log.d("CustomizeViewModel", "üßπ RANDOM ALL SKIP: positionNav=$i (positionCustom=$currentPositionCustom already assigned)")

                // X√≥a path c·ªßa layer n√†y ƒë·ªÉ tr√°nh hi·ªÉn th·ªã duplicate
                _pathSelectedList.value[i] = ""
                _keySelectedItemList.value[i] = ""
                _isSelectedItemList.value[i] = false
                continue
            }

            val randomLayer = (minSize..<_itemNavList.value[i].size).random()

            var randomColor: Int = 0

            val isMoreColors = if (_itemNavList.value[i][minSize].listImageColor.isNotEmpty()) {
                randomColor =
                    _itemNavList.value[i][randomLayer].listImageColor.indexOfFirst { it.color == colorCode }
                if (randomColor == -1) {
                    randomColor = (0..<_itemNavList.value[i][minSize].listImageColor.size).random()
                }
                true
            } else {
                false
            }
            _keySelectedItemList.value[i] =
                _itemNavList.value[i][randomLayer].path

            val pathItem = if (!isMoreColors) {
                _positionColorItemList.value[i] = 0
                _itemNavList.value[i][randomLayer].path
            } else {
                _positionColorItemList.value[i] = randomColor
                _itemNavList.value[i][randomLayer].listImageColor[randomColor].path
            }

            // ‚úÖ FIX: M·ªói layer d√πng index ri√™ng = i (v·ªã tr√≠ trong loop)
            _pathSelectedList.value[i] = pathItem

            // ‚úÖ ƒê√°nh d·∫•u positionCustom n√†y ƒë√£ ƒë∆∞·ª£c random
            positionCustomMap[currentPositionCustom] = i
            Log.d("CustomizeViewModel", "‚úÖ RANDOM ALL SET: positionNav=$i (positionCustom=$currentPositionCustom)")

            setItemNavList(i, randomLayer)
            if (isMoreColors) {
                setColorItemNav(i, randomColor)
            }
        }
        return false
    }

    suspend fun setClickReset(): String {
        resetDataList()
        _bottomNavigationList.value.forEachIndexed { index, model ->
            val positionSelected = if (index == 0) 1 else 0
            setItemNavList(index, positionSelected)
            setColorItemNav(index, 0)
        }
        val pathDefault = _dataCustomize.value!!.layerList.first().layer.first().image

        // ‚úÖ FIX: Body layer (first layer) l∆∞u v√†o index 0
        _pathSelectedList.value[0] = pathDefault
        _keySelectedItemList.value[_dataCustomize.value!!.layerList.first().positionNavigation] = pathDefault
        _isSelectedItemList.value[_dataCustomize.value!!.layerList.first().positionNavigation] = true
        return pathDefault
    }


    //----------------------------------------------------------------------------------------------------------------------
// Color
    suspend fun setItemColorDefault() {
        for (i in 0 until _dataCustomize.value!!.layerList.size) {
            // L·∫•y ƒë·ªëi t∆∞·ª£ng LayerModel ƒë·∫ßu ti√™n trong danh s√°ch con
            val currentLayer = _dataCustomize.value!!.layerList[i].layer.first()
            var firstIndex = true
            // Ki·ªÉm tra isMoreColors ƒë·ªÉ th√™m m√†u ho·∫∑c danh s√°ch r·ªóng
            if (currentLayer.isMoreColors) {
                val colorList = ArrayList<ItemColorModel>()
                for (j in 0 until currentLayer.listColor.size) {
                    val color = currentLayer.listColor[j].color
                    if (firstIndex) {
                        colorList.add(ItemColorModel(color, true))
                    } else {
                        colorList.add(ItemColorModel(color))
                    }
                    firstIndex = false
                }
                _colorItemNavList.value.add(colorList)
            } else {
                _colorItemNavList.value.add(arrayListOf())
            }
        }
        val getAllColor = ArrayList<String>()
        _itemNavList.value.forEachIndexed { index, nav ->
            val position = if (index != 0) 2 else 1
            val itemNav = nav[position]
            itemNav.listImageColor.forEach { colorList ->
                getAllColor.add(colorList.color)
            }
        }
        setColorListMost(
            getAllColor
            .groupingBy { it }
            .eachCount()
            .filter { it.value > 3 }.keys
            .toCollection(ArrayList())
        )
    }

    suspend fun setColorItemNav(positionNavSelected: Int, position: Int) {
        _colorItemNavList.value[positionNavSelected] = _colorItemNavList.value[positionNavSelected]
            .mapIndexed { index, models -> models.copy(isSelected = index == position) }
            .toCollection(ArrayList())
    }

    suspend fun setClickChangeColor(position: Int): String {
        var pathColor = ""
        _positionColorItemList.value[positionNavSelected.value] = position
        // ƒê√£ ch·ªçn h√¨nh ·∫£nh ch∆∞a
        if (_keySelectedItemList.value[positionNavSelected.value] != "") {
            // Duy·ªát qua t·ª´ng item trong b·ªô ph·∫≠n
            for (item in _dataCustomize.value!!.layerList[positionNavSelected.value].layer) {
                if (item.image == _keySelectedItemList.value[positionNavSelected.value]) {
                    // ‚úÖ FIX: Add bounds checking
                    if (position >= 0 && position < item.listColor.size) {
                        pathColor = item.listColor[position].path

                        // ‚úÖ AUTO-DETECT: T·ª± ƒë·ªông ch·ªçn pathIndex ph√π h·ª£p v·ªõi data structure
                        val pathIndex = getPathIndexForLayer(positionNavSelected.value)

                        // üéØ FIX: Ch·ªâ save khi pathIndex h·ª£p l·ªá
                        if (pathIndex != -1) {
                            _pathSelectedList.value[pathIndex] = pathColor
                        } else {
                            Log.e("CustomizeViewModel", "‚ùå COLOR: Cannot save - positionNav=${positionNavSelected.value} not found")
                        }
                    } else {
                        android.util.Log.e("CustomizeViewModel", "‚ùå Color position out of bounds: $position, list size: ${item.listColor.size}")
                    }
                }
            }
        }
        setColorItemNav(positionNavSelected.value, position)
        return pathColor
    }

//----------------------------------------------------------------------------------------------------------------------
// Extension other

    suspend fun setImageViewList(frameLayout: FrameLayout) {
        // ‚úÖ FIX: T·∫°o ImageView ri√™ng cho Body layer (index 0, ƒë·∫∑t ƒë·∫ßu ti√™n)
        val bodyImageView = ImageView(frameLayout.context).apply {
            layoutParams = FrameLayout.LayoutParams(
                FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT
            )
        }
        frameLayout.addView(bodyImageView, 0)  // Th√™m v√†o index 0 (d∆∞·ªõi c√πng)
        _bodyImageView.value = bodyImageView

        // T·∫°o c√°c ImageView cho c√°c layer kh√°c
        _imageViewList.value.addAll(addImageViewToLayout(_dataCustomize.value!!.layerList.size, frameLayout))
    }

    fun addImageViewToLayout(quantityLayer: Int, frameLayout: FrameLayout): ArrayList<ImageView> {
        val imageViewList = ArrayList<ImageView>()
        for (i in 0 until quantityLayer) {
            val imageView = ImageView(frameLayout.context).apply {
                layoutParams = FrameLayout.LayoutParams(
                    FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT
                )
            }
            frameLayout.addView(imageView)
            imageViewList.add(imageView)
        }
        return imageViewList
    }

    fun createListItem(layers: LayerListModel, isBody: Boolean = false): ArrayList<ItemNavCustomModel> {
        val listItem = arrayListOf<ItemNavCustomModel>()
        val positionCustom = layers.positionCustom
        val positionNavigation = layers.positionNavigation
        if (isBody) {
            listItem.add(
                ItemNavCustomModel(
                    path = AssetsKey.RANDOM_LAYER,
                    positionCustom = positionCustom,
                    positionNavigation = positionNavigation
                )
            )
        } else {
            listItem.add(
                ItemNavCustomModel(
                    path = AssetsKey.NONE_LAYER,
                    positionCustom = positionCustom,
                    positionNavigation = positionNavigation,
                    isSelected = true
                )
            )
            listItem.add(
                ItemNavCustomModel(
                    path = AssetsKey.RANDOM_LAYER,
                    positionCustom = positionCustom,
                    positionNavigation = positionNavigation,
                )
            )
        }
        for (layer in layers.layer) {
            if (!layer.isMoreColors) {
                listItem.add(
                    ItemNavCustomModel(
                        path = layer.image,
                        positionCustom = positionCustom,
                        positionNavigation = positionNavigation
                    )
                )
            } else {
                val listItemColor = ArrayList<ItemColorImageModel>()

                for (colorModel in layer.listColor) {
                    listItemColor.add(
                        ItemColorImageModel(
                            color = colorModel.color,
                            path = colorModel.path
                        )
                    )
                }
                listItem.add(
                    ItemNavCustomModel(
                        path = layer.image,
                        positionCustom = positionCustom,
                        positionNavigation = positionNavigation,
                        isSelected = false,
                        listImageColor = listItemColor,
                    )
                )
            }
        }
        return listItem
    }

    fun saveImageFromView(context: Context, view: View): Flow<SaveState> = flow {
        emit(SaveState.Loading)
        val bitmap = BitmapHelper.createBimapFromView(view)
        MediaHelper.saveBitmapToInternalStorage(context, ValueKey.DOWNLOAD_ALBUM_BACKGROUND, bitmap).collect { state ->
            emit(state)
        }
    }.flowOn(Dispatchers.IO)

    fun checkDataInternet(context: Activity, action: (() -> Unit)) {
        if (!_isDataAPI.value) {
            action.invoke()
            return
        }
        InternetHelper.checkInternet(context) { result ->
            if (result == HandleState.SUCCESS) {
                action.invoke()
            } else {
                context.showToast(R.string.please_check_your_internet)
            }
        }
    }

    suspend fun resetDataList() {
        val quantityLayer = _dataCustomize.value!!.layerList.size
        val positionColorItemList = ArrayList<Int>(quantityLayer)
        val isSelectedItemList = ArrayList<Boolean>(quantityLayer)
        val keySelectedItemList = ArrayList<String>(quantityLayer)
        val isShowColorList = ArrayList<Boolean>(quantityLayer)

        // ‚úÖ FIX: pathSelectedList size = s·ªë l∆∞·ª£ng layers
        // M·ªói layer c√≥ 1 slot ri√™ng: Layer 0 ‚Üí [0], Layer 1 ‚Üí [1], ..., Layer 24 ‚Üí [24]
        val pathSelectedList = ArrayList<String>(quantityLayer)

        repeat(quantityLayer) {
            positionColorItemList.add(0)
            isSelectedItemList.add(false)
            keySelectedItemList.add("")
            isShowColorList.add(true)
            pathSelectedList.add("")
        }

        setPositionColorItemList(positionColorItemList)
        setIsSelectedItemList(isSelectedItemList)
        setKeySelectedItemList(keySelectedItemList)
        setIsShowColorList(isShowColorList)
        setPathSelectedList(pathSelectedList)
    }

    //----------------------------------------------------------------------------------------------------------------------

    /**
     * üìä REPORT: T·∫°o b√°o c√°o API mismatch ƒë·ªÉ g·ª≠i Backend
     */
    fun generateApiMismatchReport(): String {
        val report = StringBuilder()
        report.appendLine("üêõ API MISMATCH REPORT")
        report.appendLine("=".repeat(50))
        report.appendLine("Character: ${_dataCustomize.value?.dataName ?: "Unknown"}")
        report.appendLine("Timestamp: ${System.currentTimeMillis()}")
        report.appendLine()

        val preset = _suggestionState.value
        if (preset != null) {
            report.appendLine("üìã SUGGESTION DATA:")
            preset.layerSelections.forEach { (storageKey, selection) ->
                report.appendLine("  StorageKey: $storageKey")
                report.appendLine("  ItemIndex: ${selection.itemIndex}")
                report.appendLine("  ColorIndex: ${selection.colorIndex}")
                report.appendLine("  Path: ${selection.path}")

                // üéØ Highlight Miley
                if (storageKey == 20 || selection.path.contains("miley", ignoreCase = true)) {
                    report.appendLine("  üéØ THIS IS MILEY!")
                }
                report.appendLine()
            }
        }

        report.appendLine("üìã CUSTOMIZE DATA:")
        _dataCustomize.value?.layerList?.forEachIndexed { index, layer ->
            report.appendLine("  Layer $index:")
            report.appendLine("    PositionNav: ${layer.positionNavigation}")
            report.appendLine("    PositionCustom: ${layer.positionCustom}")
            report.appendLine("    Items Count: ${layer.layer.size}")

            // üéØ Chi ti·∫øt ƒë·∫ßy ƒë·ªß cho Miley
            if (layer.positionNavigation == 20) {
                report.appendLine("    üéØ MILEY LAYER - ALL ITEMS:")
                layer.layer.forEachIndexed { itemIdx, item ->
                    report.appendLine("      [$itemIdx]: ${item.image}")
                }
            } else {
                report.appendLine("    Items: ${layer.layer.take(3).map { it.image.substringAfterLast("/") }}")
            }
            report.appendLine()
        }

        return report.toString()
    }

    /**
     * üíæ EXPORT: L∆∞u b√°o c√°o ra file ƒë·ªÉ g·ª≠i Backend
     */
    fun saveReportToFile(context: android.content.Context) {
        try {
            val report = generateApiMismatchReport()
            val fileName = "api_mismatch_${System.currentTimeMillis()}.txt"
            val file = java.io.File(context.getExternalFilesDir(null), fileName)
            file.writeText(report)
            Log.i("CustomizeViewModel", "üìÅ Report saved: ${file.absolutePath}")
        } catch (e: Exception) {
            Log.e("CustomizeViewModel", "‚ùå Failed to save report: ${e.message}")
        }
    }

    /**
     * ‚úÖ HELPER: Tr·∫£ v·ªÅ pathIndex d·ª±a tr√™n layerIndex
     * Logic ƒë√∫ng (theo Miley): pathIndex = layerIndex (KH√îNG ph·∫£i positionCustom)
     * - pathSelectedList[layerIndex] = path c·ªßa layer ƒë√≥
     * - Render v√†o ImageView[positionCustom]
     */
    fun getPathIndexForLayer(positionNavigation: Int): Int {
        // üîç LOG: Entry point
        Log.d("CustomizeViewModel", "üîç getPathIndexForLayer($positionNavigation)")
        Log.d("CustomizeViewModel", "   positionSelected: $positionSelected")

        // ‚úÖ PERFORMANCE: Use cached mapping instead of linear search
        val cache = _layerIndexCache.value
        val layerList = _dataCustomize.value?.layerList ?: return 0

        // üéØ FIX C·ª®NG: ƒê·ªëi v·ªõi Character 1 & 2 (Miley & Dammy), Layer[21] c√≥ posNav=20 trong data
        // ‚Üí Fix c·ª©ng: khi request posNav=21, tr·∫£ v·ªÅ Layer[21]
        if ((positionSelected == 1 || positionSelected == 2) && positionNavigation == 21) {
            Log.d("CustomizeViewModel", "   ‚úÖ HARDFIX triggered for Character $positionSelected, posNav=21")
            // T√¨m Layer[21] (index 21 trong layerList)
            if (layerList.size > 21) {
                Log.d("CustomizeViewModel", "üîß HARDFIX Character $positionSelected: posNav=21 ‚Üí Layer[21] (actual posNav=${layerList[21].positionNavigation}, posCus=${layerList[21].positionCustom})")
                Log.d("CustomizeViewModel", "   ‚Üí Returning: 21")
                return 21  // Tr·∫£ v·ªÅ layerIndex = 21
            } else {
                Log.e("CustomizeViewModel", "‚ùå HARDFIX failed: Layer[21] not found in layerList")
                return -1
            }
        } else {
            Log.d("CustomizeViewModel", "   ‚è© HARDFIX skipped (positionSelected=$positionSelected, posNav=$positionNavigation)")
        }

        // üéØ FIX: Map positionNav b·ªã l·ªói sang positionNav ƒë√∫ng
        val actualPositionNav = when (positionNavigation) {
            21 -> {
                // Fallback: n·∫øu kh√¥ng ph·∫£i character 1, t√¨m layer c√≥ positionCustom=22
                val layer22 = layerList.find { it.positionCustom == 22 }
                if (layer22 != null) {
                    val layer22Index = layerList.indexOf(layer22)
                    return layer22Index  // D√πng layerIndex thay v√¨ positionNav
                } else {
                    return -1
                }
            }
            else -> positionNavigation
        }

        // ‚úÖ Use cache for O(1) lookup instead of O(n) search
        val layerIndex = cache[actualPositionNav] ?: -1
        if (layerIndex == -1) {
            return -1
        }

        // ‚úÖ LU√îN d√πng layerIndex (theo logic c·ªßa Miley)
        // V√¨ Miley c√≥ positionCustom tr√πng nhau (Layer 0 v√† Layer 2 ƒë·ªÅu c√≥ positionCustom=1)
        // N√™n pathIndex PH·∫¢I = layerIndex ƒë·ªÉ tr√°nh conflict
        return layerIndex
    }

}